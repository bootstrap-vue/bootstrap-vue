{
  "id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed"
  },
  "variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component"
  },
  "tag": {
    "description": "Specify the HTML tag to render instead of the default tag"
  },
  "size": {
    "description": "Set the size of the component's appearence. 'sm', 'md' (default), or 'lg'"
  },
  "required": {
    "description": "Adds the 'required' attribute to the form control"
  },
  "form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control."
  },
  "autofocus": {
    "description": "When set to 'true', auto-focuses the control once it is mounted. Does not set the 'autofocus' attribute on the control"
  },
  "state": {
    "description": "Controls the validation state appearence of hte component. 'true' for valid, 'false' for invalid', or 'null' for no validation state"
  },
  "options": {
    "description": "Array of items to render in the component"
  },
  "value-field": {
    "description": "Field name in the 'options' array that should be used for the value"
  },
  "text-field": {
    "description": "Field name in the 'options' array that should be used for the text label"
  },
  "html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution."
  },
  "disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state"
  },
  "plain": {
    "description": "Render the form control in plain mode, rahter than custom styled mode"
  },
  "role": {
    "description": "Sets the ARIA attribute 'role' to a specific value"
  },
  "fade": {
    "description": "When set to 'true', enables the fade animation/transition on the component"
  },
  "noFade": {
    "description": "When set to 'true', disables the fade animation/transition on the component"
  },
  "disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state"
  },
  "active": {
    "description": "When set to 'true', places the component in the active state with active styling"
  },
  "rel": {
    "description": "Sets the 'rel' attribute on the rendered link"
  },
  "target": {
    "description": "Sets the 'target' attribute on the rendered link"
  },
  "href": {
    "description": "Denotes the target URL of the link for standard a links"
  },
  "to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object"
  },
  "replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record"
  },
  "append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path"
  },
  "exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route"
  },
  "activeClass": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'"
  },
  "exactActiveClass": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'"
  },
  "routerTag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value"
  },
  "event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default"
  },
  "noPrefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link"
  }
}
